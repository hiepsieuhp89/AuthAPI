{"ast":null,"code":"import _toConsumableArray from \"D:\\\\ReactJS\\\\AuthApi2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\ReactJS\\\\AuthApi2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        username = _JSON$parse.username,\n        password = _JSON$parse.password;\n\n    if (username && password) {\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n\n    var _JSON$parse2 = JSON.parse(data),\n        email = _JSON$parse2.email,\n        fullname = _JSON$parse2.fullname,\n        username = _JSON$parse2.username,\n        password = _JSON$parse2.password;\n\n    if (email && fullname && username && password) {\n      var _user = {\n        id: generateUserId(),\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        roles: [2],\n        // Manager\n        accessToken: \"access-token-\" + Math.random(),\n        refreshToken: \"access-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(_user);\n      return [200, _objectSpread(_objectSpread({}, _user), {}, {\n        password: undefined\n      })];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref3) {\n    var data = _ref3.data;\n\n    var _JSON$parse3 = JSON.parse(data),\n        email = _JSON$parse3.email;\n\n    if (email) {\n      var _user2 = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n\n      if (_user2) {\n        _user2.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, _user2), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(function (_ref4) {\n    var Authorization = _ref4.headers.Authorization;\n    var accessToken = Authorization && Authorization.startsWith(\"Bearer \") && Authorization.slice(\"Bearer \".length);\n\n    if (accessToken) {\n      var _user3 = userTableMock.find(function (x) {\n        return x.accessToken === accessToken;\n      });\n\n      if (_user3) {\n        return [200, _objectSpread(_objectSpread({}, _user3), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    var ids = userTableMock.map(function (el) {\n      return el.id;\n    });\n    var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n    return maxId + 1;\n  }\n}","map":{"version":3,"sources":["D:/ReactJS/AuthApi2/src/app/modules/Auth/__mocks__/mockAuth.js"],"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","data","JSON","parse","username","password","user","undefined","email","fullname","id","generateUserId","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","find","x","toLowerCase","onGet","Authorization","headers","startsWith","slice","length","ids","map","el","maxId","max"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_URL,\r\n  ME_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL\r\n} from \"../_redux/authCrud\";\r\nimport userTableMock from \"./userTableMock\";\r\n\r\nexport default function mockAuth(mock) {\r\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\r\n\r\n    const { username, password } = JSON.parse(data);\r\n\r\n    if (username && password) {\r\n      return [200, { ...user, password: undefined }];\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\r\n    const { email, fullname, username, password } = JSON.parse(data);\r\n\r\n    if (email && fullname && username && password) {\r\n      const user = {\r\n        id: generateUserId(),\r\n        email,\r\n        fullname,\r\n        username,\r\n        password,\r\n        roles: [2], // Manager\r\n        accessToken: \"access-token-\" + Math.random(),\r\n        refreshToken: \"access-token-\" + Math.random(),\r\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\r\n      };\r\n\r\n      userTableMock.push(user);\r\n\r\n      return [200, { ...user, password: undefined }];\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\r\n    const { email } = JSON.parse(data);\r\n\r\n    if (email) {\r\n      const user = userTableMock.find(\r\n        x => x.email.toLowerCase() === email.toLowerCase()\r\n      );\r\n\r\n      if (user) {\r\n        user.password = undefined;\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\r\n    const accessToken =\r\n      Authorization &&\r\n      Authorization.startsWith(\"Bearer \") &&\r\n      Authorization.slice(\"Bearer \".length);\r\n\r\n    if (accessToken) {\r\n      const user = userTableMock.find(x => x.accessToken === accessToken);\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [401];\r\n  });\r\n\r\n  function generateUserId() {\r\n    const ids = userTableMock.map(el => el.id);\r\n    const maxId = Math.max(...ids);\r\n    return maxId + 1;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}